!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){"use strict";var t,o,i,n="jelect";e[n]={version:"1.0.0",options:{classes:{autocomplete:n+"_type_autocomplete",containerActive:n+"_state_active",containerDisabled:n+"_state_disabled",currentActive:n+"-current_state_active",optionsActive:n+"-options_state_active",optionActive:n+"-option_state_active",optionDisabled:n+"-option_state_disabled",optionHide:n+"-option_state_hide"},plugins:[]},plugins:{},selectors:{container:".js-"+n,scroller:".js-"+n+"-scroller",input:".js-"+n+"-input",current:".js-"+n+"-current",options:".js-"+n+"-options",option:".js-"+n+"-option",optionValue:".js-"+n+"-option-value"},keyCode:{TAB:9,BACKSPACE:8,ENTER:13,ESC:27,DOWN:40,UP:38,HOME:36,END:35,PAGE_UP:33,PAGE_DOWN:34}},o=function(t){var o=this,i=e[n],s=i.selectors,l=i.options.classes,a=o.$jelectOptions.find(s.option+'[data-val="'+t+'"]'),r=a.find(s.optionValue).text();return a.hasClass(l.optionDisabled)?(console.error("Option {"+t+"} is disabled"),!1):(a.addClass(l.optionActive).siblings(s.option).removeClass(l.optionActive),o.$jelect.val(t).removeClass(l.containerActive).trigger("jelect.change"),o.autocomplete?o.$jelectCurrent.val(t):(o.$jelectCurrent.text(r).attr("data-val",t),o.$jelectInput.val(t).attr("value",t).trigger("change")),void o.trigger("change"))},i=function(){var t=this,o=e[n].selectors,i=[];return t.$jelectOptions.find(o.option).each(function(t,o){var n=e(o);i.push({index:t,value:n.data("val")})}),i},t=function(t,o){var i=e[n],s=i.selectors,l=i.options.classes,a={$jelect:t,$jelectCurrent:t.find(s.current),$jelectOptions:t.find(s.options),$jelectInput:t.find(s.input),autocomplete:t.hasClass(l.autocomplete),options:e.extend(!0,{},i.options,o||{})};e.extend(!0,this,a),this.init()},t.prototype.init=function(){var t=this,i=e[n],s=i.selectors,l=t.options.classes,a=t.$jelectOptions.find(s.option).not("."+l.optionDisabled).data("val");t.trigger("init"),t.values=t.serialize(),t.$jelect.val(a),t.$jelectCurrent.on("click "+n+".clickCurrent",function(){var o,i=e(s.container).filter("."+l.containerActive).not(t.$jelect),n=e(s.options).filter("."+l.optionsActive).not(t.$jelectOptions),a=t.$jelect.find(s.scroller),r=a.scrollTop(),c=t.$jelect.hasClass(l.containerDisabled),p=!t.$jelect.hasClass(l.containerActive)&&!t.$jelectOptions.hasClass(l.optionsActive);return c?!1:(p&&t.trigger("beforeOpen"),i.length&&n.length&&(i.removeClass(l.containerActive),n.removeClass(l.optionsActive)),t.$jelect.toggleClass(l.containerActive),t.$jelectOptions.toggleClass(l.optionsActive),t.$jelect.hasClass(l.containerActive)&&(o=t.$jelectOptions.find("."+l.optionActive),r=a.scrollTop(),a.scrollTop(r+o.position().top)),t.autocomplete&&t.$jelectCurrent.trigger("keyup"),void(p&&(t.$jelectCurrent.trigger("focus"),t.trigger("afterOpen"))))}),t.$jelectOptions.on("click "+n+".changeOption",s.option,function(){var i=e(this),n=i.data("val");return i.hasClass(l.optionDisabled)?!1:(o.call(t,n),void t.$jelectOptions.removeClass(l.optionsActive))}),t.autocomplete&&t.$jelectCurrent.on("keyup",function(o){var n=e(this),a=i.keyCode,r=o.keyCode,c=String.fromCharCode(r),p=/[a-zA-Zа-яА-ЯЁё0-9]/,v=n.val(),u=t.$jelectOptions.find(s.option),d=t.$jelect.find(s.scroller),f=e.grep(t.values,function(e){return-1===e.value.indexOf(v)});(p.test(c)||r===a.BACKSPACE)&&(t.$jelect.hasClass(l.containerActive)||t.$jelectCurrent.trigger("click"),u.removeClass(l.optionHide),e.each(f,function(e,t){var o=t.value;u.filter('[data-val="'+o+'"]').addClass(l.optionHide)}),u.filter(":visible").removeClass(l.optionActive).first().addClass(l.optionActive),d.scrollTop(0))})},t.prototype.trigger=function(t){var o=this;e.each(o.options.plugins||[],function(i,s){s=e[n].plugins[s],s&&s[t]&&s[t]({$jelect:o.$jelect,$jelectCurrent:o.$jelectCurrent,$jelectOptions:o.$jelectOptions,$jelectInput:o.$jelectInput,options:o.options,text:o.text(),val:o.val()})})},t.prototype.text=function(){return this.$jelectCurrent.text().trim()},t.prototype.val=function(){return this.$jelect.val()},t.prototype.setValue=function(e){return"undefined"!=typeof e&&o.call(this,e),this},t.prototype.addValue=function(t,o,i){var s=this,l=e[n],a=l.selectors,r=l.options.classes,c=s.$jelectOptions.find(a.option),p=c.length-1,v=null===i||void 0===i?p+1:i,u=null,d=null;v>c.length?v=p+1:0>v&&(v=0),u=0===v?c.first():v>0&&p>=v?c.eq(v):c.last(),d=u.clone(),d.removeClass(r.optionDisabled).removeClass(r.optionActive).removeClass(r.optionHide).attr("data-val",t).find(a.optionValue).html(o.trim()),p>=v?u.before(d):u.after(d),s.values.push({index:s.values.length,value:t})},t.prototype.serialize=function(){return i.call(this)},t.prototype.disable=function(t){var o=this,i=e[n],s=i.selectors,l=i.options.classes,a=o.$jelectOptions.find(s.option+'[data-val="'+t+'"]'),r=!a.hasClass(l.optionDisabled);if("undefined"!=typeof t){if(r&&(a.addClass(l.optionDisabled),o.$jelectCurrent.data("val")===t)){var c=o.$jelectOptions.find(s.option).not("."+l.optionDisabled).first();o.setValue(c.data("val"))}}else o.$jelect.addClass(l.containerDisabled),o.$jelectInput.attr("disabled",!0);return this},t.prototype.enable=function(t){var o=this,i=e[n],s=i.selectors,l=i.options.classes,a=o.$jelectOptions.find(s.option+'[data-val="'+t+'"]'),r=a.hasClass(l.optionDisabled);return"undefined"!=typeof t&&r?r&&(a=o.$jelectOptions.find(s.option+'[data-val="'+t+'"]'),a.removeClass(l.optionDisabled)):(o.$jelect.removeClass(l.containerDisabled),o.$jelectInput.attr("disabled",!1)),this},e(window.document).on("click "+n+".clickOutside",function(t){var o,i,s=e[n],l=s.selectors,a=e(t.target),r=e(l.options);if(!a.is(l.container)&&!a.closest(l.container).length){if(o=r.closest(l.container).data("jelect"),!o)return;i=o.options.classes,r.hasClass(i.optionsActive)&&(r.removeClass(i.optionsActive).closest(l.container).removeClass(i.containerActive),o.trigger("clickOutside"))}}).on("keydown "+n+".keydown",function(t){var i,s,l,a,r,c,p,v,u,d,f,C,h,j,g,$=e(t.target),A=e[n],b=A.keyCode,m=t.keyCode,y=A.selectors;if($.is(y.current)){switch(i=$.closest(y.container).data(n),s=i.options.classes,d=$.closest(y.container),f=d.find(y.scroller),C=d.find(y.options),r=C.outerHeight(),h=d.find(y.option).not("."+s.optionHide),j=h.filter("."+s.optionActive),c=d.hasClass(s.containerActive),l=f.scrollTop(),m){case b.TAB:d.removeClass(s.containerActive),C.removeClass(s.optionsActive),o.call(i,i.val());break;case b.ENTER:d.hasClass(s.containerActive)?j.trigger(n+".changeOption"):$.trigger("click"),t.preventDefault();break;case b.ESC:if(!c)return;$.trigger("click"),o.call(i,i.val()),t.preventDefault();break;case b.UP:if(t.preventDefault(),!c)return void $.trigger("click");var D=h.first().is(j);j.removeClass(s.optionActive),g=D?h.last():j.prevAll(":visible").not("."+s.optionDisabled).first(),a=g.position().top,0>a?l+=a:a>l+r&&(l=a);break;case b.DOWN:if(t.preventDefault(),!c)return void $.trigger("click");var O=h.last().is(j);j.removeClass(s.optionActive),g=O?h.first():j.nextAll(":visible").not("."+s.optionDisabled).first(),a=g.position().top,a>=r?l+=a:0>a&&(l=a);break;case b.HOME:if(t.preventDefault(),!c)return;if(j.is(h.first()))return;j.removeClass(s.optionActive),g=h.first(),l=g.position().top;break;case b.END:if(t.preventDefault(),!c)return;if(j.is(h.last()))return;j.removeClass(s.optionActive),g=h.last(),l=g.position().top;break;case b.PAGE_UP:if(t.preventDefault(),!c)return;p=Math.round(r/j.outerHeight()),v=Math.ceil((j.index()+1)/p)-1,u=v*p-p-1,j.removeClass(s.optionActive),0>u&&(u=0),g=0===u&&h.eq(u).hasClass(s.optionDisabled)?h.eq(u).nextAll(":visible").not("."+s.optionDisabled).first():h.eq(u),l+=g.position().top;break;case b.PAGE_DOWN:if(t.preventDefault(),!c)return;p=Math.round(r/j.outerHeight()),v=Math.ceil((j.index()+1)/p)+1,u=v*p-p,j.removeClass(s.optionActive),u>h.length&&(u=h.length-1),g=u===h.length-1?h.eq(u):h.eq(u).nextAll(":visible").not("."+s.optionDisabled).first(),l+=g.position().top}g&&(g.addClass(s.optionActive),f.scrollTop(l))}else $.is(y.option)&&(i=$.closest(y.container).data(n),s=i.options.classes,m===b.ENTER&&$.trigger(n+".changeOption"))}),e.fn[n]=function(o){var i=this,s=arguments;if(void 0===o||"object"==typeof o)return i.each(function(i,s){e.data(s,n)||e.data(s,n,new t(e(s),o))});if("string"==typeof o&&"_"!==o[0]&&"init"!==o){var l;return i.each(function(i,a){var r=e.data(a,n);r instanceof t&&"function"==typeof r[o]&&(l=r[o].apply(r,Array.prototype.slice.call(s,1))),"destroy"===o&&e.data(this,n,null)}),void 0!==l?l:i}}}),$(".jelect").jelect();var more="Show me more",less="Shoe me less",isMore=!0;$(".btn-collapse").on("click",function(){$(this).toggleClass("btn-collapse_in").find(".btn-collapse__text").text(isMore?less:more),isMore=!isMore});
//# sourceMappingURL=data:application/json;base64,
